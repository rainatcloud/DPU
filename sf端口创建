
#在upstream内核subfunction是利用devlink port interface管理的，在开源内核上，需要内核版本5.13以上才可以支持。
#详细可参见
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/devlink/devlink-port.rst?h=v5.13#n125
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/device_drivers/ethernet/mellanox/mlx5.rst?h=v5.12-rc3#n186

#直到ofed5.3，SF都是基于mdev实现，在ofed5.4之后基于auxiliary bus实现，因此sf接口可以通过mlxdevm/devlink来创建、配置和修改
#从定义上讲，SF是可以与VF共存的，实际操作上一般不会同时打开

#SF的特性
  *是PF的pci下面部署的轻量级的function，同时具备自身的资源（txq，rxq，cq，eq），这些资源并非与PF的资源共享。
  *有专用的PCI Bar空间窗口（dedicated windown in PCI bar space），不与PF或其他SF共享
  *SF与PF或其他的SF共享PCI级别的资源，如MSI-X IRQ
  
#sf的优势和限制
  *需求linux内核5.13以上
  *当前只能在switchdev模式下使用
  *无需在BIOS和设备上打开SRIoV功能

#为啥用SF，vs. VF
  *可以一个一个创建，无需一下都创建好
  *SF无需实现完整的PCI配置空间，reset和寄存器，因此相对轻量
  *SF与PF和其他SF共享MSI-X vectors，因此降低了在硬件的中断控制器的总vector需求，简单理解，就是共享中断因此无需额外配置中断数量
  
# 创建bond之后，SF端口都会丢失，需要重建SF端口
# 尤其是对于存储，需要单独创建SF接口来作为对存储后端通信的网口

# DPU卡里配置固件参数
mlxconfig -d /dev/mst/mt41686_pciconf0 s PF_BAR2_ENABLE=0 PER_PF_NUM_SF=1 \
PCI_SWITCH_EMULATION_ENABLE=1 \
PCI_SWITCH_EMULATION_NUM_PORT=16 \
VIRTIO_NET_EMULATION_ENABLE=1 \
VIRTIO_NET_EMULATION_NUM_VF=0 \
VIRTIO_NET_EMULATION_NUM_PF=0 \
VIRTIO_NET_EMULATION_NUM_MSIX=64 \
ECPF_ESWITCH_MANAGER=1 \
ECPF_PAGE_SUPPLIER=1 \
SRIOV_EN=0 \
PF_SF_BAR_SIZE=10 \
PF_TOTAL_SF=2 \
PF_NUM_PF_MSIX=64 \
PF_BAR2_ENABLE=0 \
PER_PF_NUM_SF=1


##如果在DPU的host上创建SF端口，还要在host上执行：
mlxconfig -d 0000:05:00.0 s PF_TOTAL_SF=250 PF_NUM_PF_MSIX=1000 PF_BAR2_ENABLE=0 PER_PF_NUM_SF=1 PF_SF_BAR_SIZE=10 SRIOV_EN=0
# 还要确认host侧的OFED驱动安装好，有/opt/mellanox/iproute2路径

#########配置好固件参数后，冷重启服务器#####################################

###########################
######然后以下步骤在卡里执行#####
###########################
# 添加一下路径
PATH=$PATH:/opt/mellanox/iproute2/sbin/

# 先看一下当前的端口情况
mlxdevm port show

# 可见有physical的端口0和1，还有其代表口，有一个系统创建好的sf

pci/0000:03:00.0/262143: type eth netdev p0 flavour physical port 0
pci/0000:03:00.0/196608: type eth netdev pf0hpf flavour pcipf pfnum 0
pci/0000:03:00.1/327679: type eth netdev p1 flavour physical port 1
pci/0000:03:00.1/262144: type eth netdev pf1hpf flavour pcipf pfnum 1
auxiliary/mlx5_core.sf.2/1310720: type eth netdev enp3s0f0s0 flavour physical port 0


# 创建一个88的sf端口，mlxdevm在这个路径（如果创建到BF的host上可以加上controller 1参数)
mlxdevm port add pci/0000:03:00.0 flavour pcisf pfnum 0 sfnum 88

#使用mlxdevm port show再查看一下端口
  function:
    hw_addr 00:00:00:00:00:00 state active opstate attached roce false max_uc_macs 1 trust off
pci/0000:03:00.0/294912: type eth netdev en3f0c1pf0sf88 flavour pcisf controller 1 pfnum 0 sfnum 88

# 把状态拉起来，（注意：使用DPU方式创建SF的时候：在DPU上执行这个命令之前，host上是看不见端口的）
mlxdevm port function set pci/0000:03:00.0/294912 state active

# 可以选择设置trust模式
mlxdevm port function set pci/0000:03:00.0/294912 trust on

# 设一下Mac地址
mlxdevm port function set pci/0000:03:00.0/229377 hw_addr 00:00:00:00:88:88

# 看一下端口
mlxdevm port show en3f0pf0sf88

执行结果：
pci/0000:03:00.0/229377: type eth netdev en3f0pf0sf88 flavour pcisf controller 0 pfnum 0 sfnum 88
  function:
    hw_addr 00:00:00:00:88:88 state active opstate detached roce true max_uc_macs 128 trust on

# 看下详细信息
# mlxdevm port show en3f0c1pf0sf88 -jp
{
    "port": {
        "pci/0000:03:00.0/294912": {
            "type": "eth",
            "netdev": "en3f0c1pf0sf88",
            "flavour": "pcisf",
            "controller": 1,
            "pfnum": 0,
            "sfnum": 88,
            "function": {
                "hw_addr": "02:11:11:22:33:44",
                "state": "active",
                "opstate": "attached",
                "roce": "true",
                "max_uc_macs": 128,
                "trust": "on"
            }
        }
    }
}


# 如果state是active，opstate是attached，在DPU主机上应该可以看到设备

########################################################################################
# 如果看到上述命令opstate是detached，那么还是DPU上只能看见sf的代表口，看如下结果
执行结果：
{
    "port": {
        "pci/0000:03:00.0/229377": {
            "type": "eth",
            "netdev": "en3f0pf0sf88",
            "flavour": "pcisf",
            "controller": 0,
            "pfnum": 0,
            "sfnum": 88,
            "function": {
                "hw_addr": "00:00:00:00:88:88",
                "state": "active",
                "opstate": "detached",
                "roce": "true",
                "max_uc_macs": 128,
                "trust": "on"
            }
        }
    }
}

#执行
ethtool -i en3f0pf0sf88

# 可见结果为rep的代表口驱动

driver: mlx5e_rep
version: 5.4.0-1022.23.g3f6e5a6-bluefiel
firmware-version: 24.32.1010 (MT_0000000540)
expansion-rom-version:
bus-info:
supports-statistics: yes
supports-test: no
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: no

# devlink看下pcie设备

devlink dev show

# 可见没有这个sf设备

pci/0000:03:00.0
pci/0000:03:00.1
auxiliary/mlx5_core.sf.2

# 这个才是

cat /sys/bus/auxiliary/devices/mlx5_core.sf.3/sfnum
88

readlink /sys/bus/auxiliary/devices/mlx5_core.sf.3
../../../devices/pci0000:00/0000:00:00.0/0000:01:00.0/0000:02:00.0/0000:03:00.0/mlx5_core.sf.3

# 缺省情况下SF是attach到配置驱动（configuration driver）mlx5_core.sf_cfg
# 必须把SF从这个解绑然后绑到mlx5_core.sf驱动才能使用，我们把这个设备从sf的驱动解绑

echo mlx5_core.sf.3 >  /sys/bus/auxiliary/devices/mlx5_core.sf.3/driver/unbind
echo mlx5_core.sf.3 > /sys/bus/auxiliary/drivers/mlx5_core.sf/bind

# 看到端口，ok

ip link show

# en3f0pf0sf88是SF口，enp3s0f0s88是代表口

......
13: en3f0pf0sf88: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
    link/ether ca:10:34:2d:ba:82 brd ff:ff:ff:ff:ff:ff
14: enp3s0f0s88: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000

#设备也可以看到了

devlink port show

#显示结果有sf.3
pci/0000:03:00.0/262143: type eth netdev p0 flavour physical port 0
pci/0000:03:00.0/196608: type eth netdev pf0hpf flavour pcipf pfnum 0
pci/0000:03:00.1/327679: type eth netdev p1 flavour physical port 1
pci/0000:03:00.1/262144: type eth netdev pf1hpf flavour pcipf pfnum 1
auxiliary/mlx5_core.sf.2/1310720: type eth netdev enp3s0f0s0 flavour physical port 0
auxiliary/mlx5_core.sf.3/1376256: type eth netdev enp3s0f0s88 flavour physical port 0


#显示设备和相关协议的关系：

# tree -l -L 3 -P "mlx5_core.sf." /sys/bus/auxiliary/devices/
/sys/bus/auxiliary/devices/
├── mlx5_core.eth.0 -> ../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.eth.0
│   ├── driver -> ../../../../../bus/auxiliary/drivers/mlx5_core.eth
│   │   ├── mlx5_core.eth.0 -> ../../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.eth.0  [recursive, not followed]
│   │   ├── mlx5_core.eth.1 -> ../../../../devices/pci0000:00/0000:00:03.0/0000:05:00.1/mlx5_core.eth.1
│   │   ├── mlx5_core.eth.2 -> ../../../../devices/pci0000:40/0000:40:03.0/0000:43:00.0/mlx5_core.eth.2
│   │   ├── mlx5_core.eth.3 -> ../../../../devices/pci0000:40/0000:40:03.0/0000:43:00.1/mlx5_core.eth.3
│   │   ├── mlx5_core.eth.4 -> ../../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.sf.4/mlx5_core.eth.4
│   │   └── module -> ../../../../module/mlx5_core
│   ├── power
│   └── subsystem -> ../../../../../bus/auxiliary
│       ├── devices
│       └── drivers
├── mlx5_core.eth.1 -> ../../../devices/pci0000:00/0000:00:03.0/0000:05:00.1/mlx5_core.eth.1  [recursive, not followed]
├── mlx5_core.eth.2 -> ../../../devices/pci0000:40/0000:40:03.0/0000:43:00.0/mlx5_core.eth.2  [recursive, not followed]
├── mlx5_core.eth.3 -> ../../../devices/pci0000:40/0000:40:03.0/0000:43:00.1/mlx5_core.eth.3  [recursive, not followed]
├── mlx5_core.eth.4 -> ../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.sf.4/mlx5_core.eth.4  [recursive, not followed]
├── mlx5_core.rdma.0 -> ../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.rdma.0
│   ├── driver -> ../../../../../bus/auxiliary/drivers/mlx5_ib.rdma
│   │   ├── mlx5_core.rdma.0 -> ../../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.rdma.0  [recursive, not followed]
│   │   ├── mlx5_core.rdma.1 -> ../../../../devices/pci0000:00/0000:00:03.0/0000:05:00.1/mlx5_core.rdma.1
│   │   ├── mlx5_core.rdma.2 -> ../../../../devices/pci0000:40/0000:40:03.0/0000:43:00.0/mlx5_core.rdma.2
│   │   ├── mlx5_core.rdma.3 -> ../../../../devices/pci0000:40/0000:40:03.0/0000:43:00.1/mlx5_core.rdma.3
│   │   ├── mlx5_core.rdma.4 -> ../../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.sf.4/mlx5_core.rdma.4
│   │   └── module -> ../../../../module/mlx5_ib
│   ├── power
│   └── subsystem -> ../../../../../bus/auxiliary  [recursive, not followed]
├── mlx5_core.rdma.1 -> ../../../devices/pci0000:00/0000:00:03.0/0000:05:00.1/mlx5_core.rdma.1  [recursive, not followed]
├── mlx5_core.rdma.2 -> ../../../devices/pci0000:40/0000:40:03.0/0000:43:00.0/mlx5_core.rdma.2  [recursive, not followed]
├── mlx5_core.rdma.3 -> ../../../devices/pci0000:40/0000:40:03.0/0000:43:00.1/mlx5_core.rdma.3  [recursive, not followed]
├── mlx5_core.rdma.4 -> ../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.sf.4/mlx5_core.rdma.4  [recursive, not followed]
└── mlx5_core.sf.4 -> ../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.sf.4
    ├── driver -> ../../../../../bus/auxiliary/drivers/mlx5_core.sf
    │   ├── mlx5_core.sf.4 -> ../../../../devices/pci0000:00/0000:00:03.0/0000:05:00.0/mlx5_core.sf.4  [recursive, not followed]
    │   └── module -> ../../../../module/mlx5_core  [recursive, not followed]
    ├── infiniband
    │   └── mlx5_0
    ├── infiniband_mad
    │   ├── issm4
    │   └── umad4
    ├── infiniband_verbs
    │   └── uverbs4
    ├── mlx5_core.eth.4
    │   ├── driver -> ../../../../../../bus/auxiliary/drivers/mlx5_core.eth  [recursive, not followed]
    │   ├── power
    │   └── subsystem -> ../../../../../../bus/auxiliary  [recursive, not followed]
    ├── mlx5_core.rdma.4
    │   ├── driver -> ../../../../../../bus/auxiliary/drivers/mlx5_ib.rdma  [recursive, not followed]
    │   ├── power
    │   └── subsystem -> ../../../../../../bus/auxiliary  [recursive, not followed]
    ├── net
    │   └── enp5s0f0s88
    ├── power
    └── subsystem -> ../../../../../bus/auxiliary  [recursive, not followed]

#查看SF的rdma设备名命令
rdma dev show

返回结果，看mlx5_0是新创建的这个设备
0: mlx5_4: node_type ca fw 24.38.0368 node_guid 08c0:eb03:003e:8eca sys_image_guid 08c0:eb03:003e:8eca
1: mlx5_1: node_type ca fw 24.38.0368 node_guid 08c0:eb03:003e:8ecb sys_image_guid 08c0:eb03:003e:8eca
2: mlx5_2: node_type ca fw 22.35.2000 node_guid 0c42:a103:00fa:18a2 sys_image_guid 0c42:a103:00fa:18a2
3: mlx5_3: node_type ca fw 22.35.2000 node_guid 0c42:a103:00fa:18a3 sys_image_guid 0c42:a103:00fa:18a2
4: mlx5_0: node_type ca fw 24.38.0368 node_guid 0211:11ff:fe22:3344 sys_image_guid 08c0:eb03:003e:8eca

#这样看对应关系
ls /sys/bus/auxiliary/devices/mlx5_core.sf.4/infiniband

#返回结果
mlx5_0


#不用可以这么删了
mlxdevm port del pci/0000:03:00.0/229377

