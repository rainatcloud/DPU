
#在upstream内核subfunction是利用devlink port interface管理的，在开源内核上，需要内核版本5.13以上才可以支持。
#详细可参见
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/devlink/devlink-port.rst?h=v5.13#n125
# https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/networking/device_drivers/ethernet/mellanox/mlx5.rst?h=v5.12-rc3#n186

#直到ofed5.3，SF都是基于mdev实现，在ofed5.4之后基于auxiliary bus实现，因此sf接口可以通过mlxdevm/devlink来创建、配置和修改
#从定义上讲，SF是可以与VF共存的，实际操作上一般不会同时打开

#SF的特性
  *是PF的pci下面部署的轻量级的function，同时具备自身的资源（txq，rxq，cq，eq），这些资源并非与PF的资源共享。
  *有专用的PCI Bar空间窗口（dedicated windown in PCI bar space），不与PF或其他SF共享
  *SF与PF或其他的SF共享PCI级别的资源，如MSI-X IRQ
  
#sf的优势和限制
  *需求linux内核5.13以上
  *当前只能在switchdev模式下使用
  *无需在BIOS和设备上打开SRIoV功能

#为啥用SF，vs. VF
  *可以一个一个创建，无需一下都创建好
  *SF无需实现完整的PCI配置空间，reset和寄存器，因此相对轻量
  *SF与PF和其他SF共享MSI-X vectors，因此降低了在硬件的中断控制器的总vector需求，简单理解，就是共享中断因此无需额外配置中断数量
  
# 创建bond之后，SF端口都会丢失，需要重建SF端口
# 尤其是对于存储，需要单独创建SF接口来作为对存储后端通信的网口

# 先看一下当前的端口情况

devlink port show

# 可见有physical的端口0和1，还有其代表口，有一个系统创建好的sf

pci/0000:03:00.0/262143: type eth netdev p0 flavour physical port 0
pci/0000:03:00.0/196608: type eth netdev pf0hpf flavour pcipf pfnum 0
pci/0000:03:00.1/327679: type eth netdev p1 flavour physical port 1
pci/0000:03:00.1/262144: type eth netdev pf1hpf flavour pcipf pfnum 1
auxiliary/mlx5_core.sf.2/1310720: type eth netdev enp3s0f0s0 flavour physical port 0


# 创建一个88的sf端口，mlxdevm在这个路径（如果创建到BF的host上可以加上controller 1参数)

mlxdevm port add pci/0000:03:00.0 flavour pcisf pfnum 0 sfnum 88

# 添加一下路径

PATH=$PATH:/opt/mellanox/iproute2/sbin/

# 可以选择设置trust模式

mlxdevm port function set pci/0000:03:00.0/229377 trust on

# 把状态拉起来

mlxdevm port function set pci/0000:03:00.0/229377 state active

# 设一下Mac地址

mlxdevm port function set pci/0000:03:00.0/229377 hw_addr 00:00:00:00:88:88

# 看一下端口

mlxdevm port show en3f0pf0sf88

执行结果：
pci/0000:03:00.0/229377: type eth netdev en3f0pf0sf88 flavour pcisf controller 0 pfnum 0 sfnum 88
  function:
    hw_addr 00:00:00:00:88:88 state active opstate detached roce true max_uc_macs 128 trust on

# 看下详细信息

mlxdevm port show en3f0pf0sf88 -jp

执行结果：
{
    "port": {
        "pci/0000:03:00.0/229377": {
            "type": "eth",
            "netdev": "en3f0pf0sf88",
            "flavour": "pcisf",
            "controller": 0,
            "pfnum": 0,
            "sfnum": 88,
            "function": {
                "hw_addr": "00:00:00:00:88:88",
                "state": "active",
                "opstate": "detached",
                "roce": "true",
                "max_uc_macs": 128,
                "trust": "on"
            }
        }
    }
}

# 但是到此为止，还是只能看见sf的代表口

ethtool -i en3f0pf0sf88

# 可见结果为rep的代表口驱动

driver: mlx5e_rep
version: 5.4.0-1022.23.g3f6e5a6-bluefiel
firmware-version: 24.32.1010 (MT_0000000540)
expansion-rom-version:
bus-info:
supports-statistics: yes
supports-test: no
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: no

# devlink看下pcie设备

devlink dev show

# 可见没有这个sf设备

pci/0000:03:00.0
pci/0000:03:00.1
auxiliary/mlx5_core.sf.2

# 这个才是

cat /sys/bus/auxiliary/devices/mlx5_core.sf.3/sfnum
88

readlink /sys/bus/auxiliary/devices/mlx5_core.sf.3
../../../devices/pci0000:00/0000:00:00.0/0000:01:00.0/0000:02:00.0/0000:03:00.0/mlx5_core.sf.3

# 缺省情况下SF是attach到配置驱动（configuration driver）mlx5_core.sf_cfg
# 必须把SF从这个解绑然后绑到mlx5_core.sf驱动才能使用，我们把这个设备从sf的驱动解绑

echo mlx5_core.sf.3 >  /sys/bus/auxiliary/devices/mlx5_core.sf.3/driver/unbind
echo mlx5_core.sf.3 > /sys/bus/auxiliary/drivers/mlx5_core.sf/bind

# 看到端口，ok

ip link show

# en3f0pf0sf88是SF口，enp3s0f0s88是代表口

......
13: en3f0pf0sf88: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
    link/ether ca:10:34:2d:ba:82 brd ff:ff:ff:ff:ff:ff
14: enp3s0f0s88: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000

#设备也可以看到了

devlink port show

#显示结果有sf.3
pci/0000:03:00.0/262143: type eth netdev p0 flavour physical port 0
pci/0000:03:00.0/196608: type eth netdev pf0hpf flavour pcipf pfnum 0
pci/0000:03:00.1/327679: type eth netdev p1 flavour physical port 1
pci/0000:03:00.1/262144: type eth netdev pf1hpf flavour pcipf pfnum 1
auxiliary/mlx5_core.sf.2/1310720: type eth netdev enp3s0f0s0 flavour physical port 0
auxiliary/mlx5_core.sf.3/1376256: type eth netdev enp3s0f0s88 flavour physical port 0


#不用可以这么删了
mlxdevm port del pci/0000:03:00.0/229377

